name: jojo-server-ci

on:
  push:
    brances:
      - "*"
workflow_dispatch:

env:
  NODE_ENV: ci
  POSTGRES_DB: jojo-ci
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  SERVER_HOST: 18.142.205.192
  GIT_PROJECT_CLIENT_DIR: jojo-client
  GIT_PROJECT_SERVER_DIR: jojo-server
  SERVER_USER: jojo
  SERVER_PROJECT_CLIENT_DIR: 123
  SERVER_PROJECT_SERVER_DIR: ~/jojo-server
  DOCKER_CONTAINER_NAME:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    container: node:18.16.1-slim
    services:
      postgres:
        image: postgres:14.7-alpine3.17
        env:
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
    steps:
      - uses: actions/checkout@v3
      - name: npm install in web-server
        run: |
          cd ${{env.GIT_PROJECT_SERVER_DIR}}
          npm build
      - name: archive build js files in server
        uses: actions/upload-artifact@v3
        with:
          name: server-tsc-output
          path: ${{env.GIT_PROJECT_SERVER_DIR}}/dist

  build-server:
    needs: test-and-build
    runs-on: ubuntu-latest
    container: docker:20.10.21-alpine3.16
    steps:
      - users: action/checkout@v3
      - name: restore build files server
        uses: actions/download-artifact@v3
        with:
          name: server-tsc-output
          path: ${{env.GIT_PROJECT_SERVER_DIR}}/dist

  deploy:
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    needs: build-server
